package no.mabjork.UserService.securityimport org.springframework.beans.factory.annotation.Valueimport org.springframework.security.crypto.password.PasswordEncoderimport org.springframework.stereotype.Componentimport java.security.NoSuchAlgorithmExceptionimport java.security.spec.InvalidKeySpecExceptionimport java.util.*import javax.crypto.SecretKeyFactoryimport javax.crypto.spec.PBEKeySpec@Componentclass PBKDF2Encoder(        @Value("\${springbootwebfluxjjwt.password.encoder.secret}")        val secret: String,        @Value("\${springbootwebfluxjjwt.password.encoder.iteration}")        val iteration: Int,        @Value("\${springbootwebfluxjjwt.password.encoder.keylength}")        val keyLength: Int) : PasswordEncoder {    override fun matches(cs: CharSequence?, string: String?): Boolean {        return encode(cs).equals(string);    }    override fun encode(cs: CharSequence?): String {        try {            val result = SecretKeyFactory                    .getInstance("PBKDF2WithHmacSHA512")                    .generateSecret(PBEKeySpec(cs.toString().toCharArray(), secret.toByteArray(), iteration, keyLength))                    .encoded            return Base64.getEncoder().encodeToString(result)        } catch (ex : InvalidKeySpecException){            throw RuntimeException(ex)        } catch (ex : NoSuchAlgorithmException){            throw RuntimeException(ex)        }    }}